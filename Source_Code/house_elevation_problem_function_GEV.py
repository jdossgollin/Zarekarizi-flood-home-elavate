#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 25 20:14:55 2019

@author: mxz414
"""

####################################################################################################
############### THIS IS THE MAIN HOUSE ELEVATION MODEL AS A FUNCTION ###############################
####################################################################################################

def house_elevation_problem_GEV(Delta_Elev,disc_rate=0.04870,n=30): 
    method_prob="GEV"
    import numpy as np
    tmp=[1/(1+disc_rate)**i for i in range(0,(n+1))]
    ctmp=np.sum(tmp)

    ################################################################################################
    ############### THIS IS A FUNCTION TO CALCULATE EXPECTED ANNUAL DAMAGES ########################
    ################################################################################################

    def Expected_Annual_Damages(flood_probabilities, flood_depths, ft_below_BFE, structure_value, \
                            damage_vals, depth_vals):

        ############################ Expected Annual Damages (Actuary rate) Calculator Function ####
        # flood_probabilities=[1/500,1/100, 1/50, 1/25, 1/10, 1/1]
        # This is the absolute elevation of flood
        # flood_depths=[29.8272, 24.2323, 21.6013, 19.5165, 16.7885, 0] 
        # ft_below_BFE=10
        # structure_value=350000
        # damage_vals=RES_Damage_Factors
        # depth_vals=EU_Depth
        # EU_Depth the depth of water in the house. (Compared to the floor)
        # EU_Depth=[0, 1.64, 3.28, 4.92, 6.56, 9.84, 13.12, 16.40] 
        # RES_Damage_Factors=[0.20, 0.44, 0.58, 0.68, 0.78, 0.85, 0.92, 0.96] # These are from EU
        import numpy as np
        # These are the probabilities for which we would like to know the depth!
        prob=np.arange(min(flood_probabilities), (max(flood_probabilities)-0.001), 0.001)
        prob.sort()
        prob=np.flip(prob,0)

        w_prob=np.zeros((len(prob)),float)
        for i in range(0,len(prob)-1):
            w_prob[i]=prob[i]-prob[i+1]

        w_prob[len(prob)-1]=prob[len(prob)-1]
            
        f_depth=np.interp(prob,flood_probabilities, flood_depths)
        # Note that 24.2323 is BFE elevation (100-yr)
        damages=np.interp(f_depth-24.2323+ft_below_BFE,depth_vals, damage_vals,left=0) 
        damages[damages>structure_value]=structure_value
        #print(damages)
        total_damages=damages*structure_value*w_prob
        total_damages=np.sum(total_damages)
    
        return(total_damages)
  
    ################################################################################################
    ################################################################################################


    ################################################################################################
    ############### THIS IS A FUNCTION TO PLOT USGS DATA ###########################################
    ################################################################################################

    def Plot_USGS(nyears=100,station_id = "01554000",param_id = "00065",plot=False):
        
        import matplotlib
        import matplotlib.pyplot as plt
        from climata.usgs import DailyValueIO
        import pandas as pd
        import numpy as np

        plt.style.use('ggplot')
        #%matplotlib inline
        matplotlib.rcParams['figure.figsize'] = (14.0, 8.0)

        # set parameters
        ndays = 365 * nyears
    
        datelist = pd.date_range(end=pd.datetime.today(), periods=ndays).tolist()
    
        dataa = DailyValueIO(start_date=datelist[0],end_date=datelist[-1],
                        station=station_id,parameter=param_id)

       # create lists of date-flow values
        for series in dataa:
            dates = [r[0] for r in series.data]
            flow = [r[1] for r in series.data]
    
        if plot :   
            plt.plot(dates, flow)
            plt.xlabel('Date')
            plt.ylabel(series.variable_name)
            plt.title(series.site_name)
            plt.xticks(rotation='vertical')
            plt.margins(0.2)
            plt.show()
        
        return(dates,flow)
    
    ################################################################################################
    ################################################################################################


    # Elevation is lever and the rest are parameters
  
    ################################################################################################
    # 0. Import the required packages ##############################################################
    ################################################################################################

    import numpy as np
       
    ################################################################################################
    # 1. Series of elevations at which we would like to assess the damages and costs ###############
    ################################################################################################

    elevation_vector=np.zeros((15,),float)
    
    for i in range(0,15):
        elevation_vector[i]=i
    # elevation_vector=array([0.,1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.])
    # ft below BFE:          10  9  8  7  6  5  4  3  2  1  0   -1  -2  -3  -4
    #print(elevation_vector)

    ################################################################################################
    # 2. Calculate the cost of elevating the house (fill foundation). ##############################    
    ################################################################################################

    cost_elevation_vector=np.array([163707.5,144330.0,124952.5,107245.0,91140.0,76557.5,63422.5,\
                                    51662.5,41292.5,31960.0,23865.0,16845.0,10820.0,5717.5,0.0])
    
    cost_elevation_vector=np.flip(cost_elevation_vector,0)
    
    cost_elevation=np.interp(Delta_Elev,elevation_vector,cost_elevation_vector)
    #print(cost_elevation)

    ################################################################################################
    # 3. Calculate the discounted flood damages ####################################################
    ################################################################################################
    if method_prob=="USGS":
        # Depth (absolute elevation) associated with differnt return levels
        Selin_Depth = np.array([29.8272, 24.2323, 21.6013, 19.5165, 16.7885, 0]) 
    
        # Return levels for which elevations are listed above
        Selin_Prob = np.array([1/500, 1/100, 1/50, 1/25, 1/10, 1/1])
        
    elif method_prob=="GEV":
        Selin_Depth=np.array([0,15.22734,18.91727,20.16593,21.12648,21.93252,22.63809,23.27165,23.85039,24.38564,24.88534,25.35529,25.79989,26.22255,26.62601,27.01248,27.38377,27.74142,28.08671,28.42075,28.74447,29.05872,29.36420,29.66155,29.95134,30.23408,30.51020,30.78013,31.04421,31.30279,31.55617,31.80462,32.04840,32.28774,32.52285,32.75393,32.98116,33.20472,33.42476,33.64143,33.85486,34.06518,34.27252,34.47699,34.67869,34.87773,35.07419,35.26817,35.45974,35.64900,35.83601,36.02085,36.20358,36.38426,36.56297,36.73975,36.91466,37.08776,37.25910,37.42872,37.59666,37.76298,37.92772,38.09092,38.25261,38.41283,38.57162,38.72901,38.88504,39.03974,39.19314,39.34526,39.49614,39.64580,39.79427,39.94158,40.08775,40.23280,40.37676,40.51965,40.66148,40.80229,40.94209,41.08090,41.21874,41.35563,41.49158,41.62661,41.76075,41.89400,42.02638,42.15791,42.28860,42.41846,42.54752,42.67578,42.80325,42.92996,43.05590,43.18111,43.30557,43.42932,43.55236,43.67469,43.79634,43.91731,44.03761,44.15725,44.27625,44.39460,44.51233,44.62943,44.74592,44.86181,44.97711,45.09182,45.20595,45.31951,45.43250,45.54494,45.65684,45.76819,45.87901,45.98930,46.09907,46.20833,46.31709,46.42534,46.53310,46.64037,46.74715,46.85347,46.95931,47.06468,47.16960,47.27406,47.37808,47.48165,47.58478,47.68748,47.78975,47.89160,47.99303,48.09405,48.19465,48.29485,48.39465,48.49406,48.59307,48.69169,48.78993,48.88779,48.98528,49.08239,49.17914,49.27552,49.37154,49.46720,49.56252,49.65748,49.75209,49.84637,49.94030,50.03390,50.12716,50.22010,50.31271,50.40499,50.49696,50.58860,50.67994,50.77096,50.86167,50.95208,51.04219,51.13199,51.22150,51.31071,51.39963,51.48826,51.57661,51.66467,51.75245,51.83995,51.92717,52.01411,52.10079,52.18719,52.27333,52.35920,52.44481,52.53016,52.61525,52.70008,52.78465,52.86898,52.95305,53.03688,53.12045,53.20379,53.28688,53.36973,53.45234,53.53472,53.61686,53.69876,53.78044,53.86188,53.94310,54.02409,54.10486,54.18540,54.26572,54.34582,54.42571,54.50538,54.58483,54.66407,54.74310,54.82192,54.90053,54.97894,55.05714,55.13513,55.21292,55.29051,55.36790,55.44509,55.52209,55.59889,55.67549,55.75191,55.82813,55.90416,55.98000,56.05565,56.13112,56.20640,56.28150,56.35641,56.43115,56.50570,56.58007,56.65427,56.72829,56.80213,56.87580,56.94930,57.02262,57.09577,57.16875,57.24156,57.31421,57.38669,57.45900,57.53114,57.60313,57.67495,57.74660,57.81810,57.88944,57.96061,58.03163,58.10250,58.17320,58.24376,58.31415,58.38440,58.45449,58.52443,58.59422,58.66386,58.73335,58.80269,58.87189,58.94094,59.00984,59.07860,59.14722,59.21569,59.28402,59.35221,59.42026,59.48817,59.55594,59.62357,59.69107,59.75843,59.82565,59.89273,59.95969,60.02650,60.09319,60.15974,60.22616,60.29246,60.35862,60.42465,60.49055,60.55632,60.62197,60.68749,60.75288,60.81815,60.88330,60.94832,61.01321,61.07799,61.14264,61.20717,61.27158,61.33586,61.40003,61.46408,61.52801,61.59183,61.65552,61.71910,61.78256,61.84591,61.90914,61.97226,62.03527,62.09816,62.16093,62.22360,62.28615,62.34860,62.41093,62.47315,62.53526,62.59727,62.65916,62.72095,62.78263,62.84420,62.90567,62.96703,63.02828,63.08943,63.15048,63.21142,63.27226,63.33299,63.39363,63.45416,63.51459,63.57491,63.63514,63.69527,63.75529,63.81522,63.87505,63.93478,63.99441,64.05395,64.11338,64.17273,64.23197,64.29112,64.35017,64.40913,64.46799,64.52676,64.58544,64.64402,64.70251,64.76091,64.81921,64.87743,64.93555,64.99358,65.05152,65.10937,65.16713,65.22480,65.28238,65.33988,65.39728,65.45460,65.51183,65.56897,65.62602,65.68299,65.73987,65.79667,65.85338,65.91001,65.96655,66.02301,66.07938,66.13567,66.19187,66.24800,66.30404,66.36000,66.41587,66.47166,66.52738,66.58301,66.63856,66.69403,66.74942,66.80473,66.85996,66.91511,66.97019,67.02518,67.08010,67.13494,67.18970,67.24438,67.29899,67.35352,67.40797,67.46235,67.51665,67.57087,67.62502,67.67910,67.73310,67.78702,67.84088,67.89465,67.94836,68.00199,68.05555,68.10903,68.16244,68.21578,68.26905,68.32225,68.37537,68.42843,68.48141,68.53432,68.58716,68.63994,68.69264,68.74527,68.79783,68.85032,68.90275,68.95510,69.00739,69.05961,69.11176,69.16385,69.21586,69.26781,69.31969,69.37151,69.42326,69.47494,69.52655,69.57810,69.62959,69.68101,69.73236,69.78365,69.83488,69.88604,69.93713,69.98816,70.03913,70.09003,70.14088,70.19165,70.24237,70.29302,70.34361,70.39414,70.44460,70.49500,70.54535,70.59563,70.64584,70.69600,70.74610,70.79613,70.84611,70.89603,70.94588,70.99568,71.04541,71.09509,71.14470,71.19426,71.24376,71.29320,71.34258,71.39190,71.44117,71.49038,71.53952,71.58862,71.63765,71.68663,71.73555,71.78441])
        Selin_Depth=np.flip(Selin_Depth)
        Selin_Prob=np.array([1,0.999999990,0.499999998,0.333333332,0.249999999,0.200000000,0.166666666,0.142857143,0.125000000,0.111111111,0.100000000,0.090909091,0.083333333,0.076923077,0.071428571,0.066666667,0.062500000,0.058823529,0.055555556,0.052631579,0.050000000,0.047619048,0.045454545,0.043478261,0.041666667,0.040000000,0.038461538,0.037037037,0.035714286,0.034482759,0.033333333,0.032258065,0.031250000,0.030303030,0.029411765,0.028571429,0.027777778,0.027027027,0.026315789,0.025641026,0.025000000,0.024390244,0.023809524,0.023255814,0.022727273,0.022222222,0.021739130,0.021276596,0.020833333,0.020408163,0.020000000,0.019607843,0.019230769,0.018867925,0.018518519,0.018181818,0.017857143,0.017543860,0.017241379,0.016949153,0.016666667,0.016393443,0.016129032,0.015873016,0.015625000,0.015384615,0.015151515,0.014925373,0.014705882,0.014492754,0.014285714,0.014084507,0.013888889,0.013698630,0.013513514,0.013333333,0.013157895,0.012987013,0.012820513,0.012658228,0.012500000,0.012345679,0.012195122,0.012048193,0.011904762,0.011764706,0.011627907,0.011494253,0.011363636,0.011235955,0.011111111,0.010989011,0.010869565,0.010752688,0.010638298,0.010526316,0.010416667,0.010309278,0.010204082,0.010101010,0.010000000,0.009900990,0.009803922,0.009708738,0.009615385,0.009523810,0.009433962,0.009345794,0.009259259,0.009174312,0.009090909,0.009009009,0.008928571,0.008849558,0.008771930,0.008695652,0.008620690,0.008547009,0.008474576,0.008403361,0.008333333,0.008264463,0.008196721,0.008130081,0.008064516,0.008000000,0.007936508,0.007874016,0.007812500,0.007751938,0.007692308,0.007633588,0.007575758,0.007518797,0.007462687,0.007407407,0.007352941,0.007299270,0.007246377,0.007194245,0.007142857,0.007092199,0.007042254,0.006993007,0.006944444,0.006896552,0.006849315,0.006802721,0.006756757,0.006711409,0.006666667,0.006622517,0.006578947,0.006535948,0.006493506,0.006451613,0.006410256,0.006369427,0.006329114,0.006289308,0.006250000,0.006211180,0.006172840,0.006134969,0.006097561,0.006060606,0.006024096,0.005988024,0.005952381,0.005917160,0.005882353,0.005847953,0.005813953,0.005780347,0.005747126,0.005714286,0.005681818,0.005649718,0.005617978,0.005586592,0.005555556,0.005524862,0.005494505,0.005464481,0.005434783,0.005405405,0.005376344,0.005347594,0.005319149,0.005291005,0.005263158,0.005235602,0.005208333,0.005181347,0.005154639,0.005128205,0.005102041,0.005076142,0.005050505,0.005025126,0.005000000,0.004975124,0.004950495,0.004926108,0.004901961,0.004878049,0.004854369,0.004830918,0.004807692,0.004784689,0.004761905,0.004739336,0.004716981,0.004694836,0.004672897,0.004651163,0.004629630,0.004608295,0.004587156,0.004566210,0.004545455,0.004524887,0.004504505,0.004484305,0.004464286,0.004444444,0.004424779,0.004405286,0.004385965,0.004366812,0.004347826,0.004329004,0.004310345,0.004291845,0.004273504,0.004255319,0.004237288,0.004219409,0.004201681,0.004184100,0.004166667,0.004149378,0.004132231,0.004115226,0.004098361,0.004081633,0.004065041,0.004048583,0.004032258,0.004016064,0.004000000,0.003984064,0.003968254,0.003952569,0.003937008,0.003921569,0.003906250,0.003891051,0.003875969,0.003861004,0.003846154,0.003831418,0.003816794,0.003802281,0.003787879,0.003773585,0.003759398,0.003745318,0.003731343,0.003717472,0.003703704,0.003690037,0.003676471,0.003663004,0.003649635,0.003636364,0.003623188,0.003610108,0.003597122,0.003584229,0.003571429,0.003558719,0.003546099,0.003533569,0.003521127,0.003508772,0.003496503,0.003484321,0.003472222,0.003460208,0.003448276,0.003436426,0.003424658,0.003412969,0.003401361,0.003389831,0.003378378,0.003367003,0.003355705,0.003344482,0.003333333,0.003322259,0.003311258,0.003300330,0.003289474,0.003278689,0.003267974,0.003257329,0.003246753,0.003236246,0.003225806,0.003215434,0.003205128,0.003194888,0.003184713,0.003174603,0.003164557,0.003154574,0.003144654,0.003134796,0.003125000,0.003115265,0.003105590,0.003095975,0.003086420,0.003076923,0.003067485,0.003058104,0.003048780,0.003039514,0.003030303,0.003021148,0.003012048,0.003003003,0.002994012,0.002985075,0.002976190,0.002967359,0.002958580,0.002949853,0.002941176,0.002932551,0.002923977,0.002915452,0.002906977,0.002898551,0.002890173,0.002881844,0.002873563,0.002865330,0.002857143,0.002849003,0.002840909,0.002832861,0.002824859,0.002816901,0.002808989,0.002801120,0.002793296,0.002785515,0.002777778,0.002770083,0.002762431,0.002754821,0.002747253,0.002739726,0.002732240,0.002724796,0.002717391,0.002710027,0.002702703,0.002695418,0.002688172,0.002680965,0.002673797,0.002666667,0.002659574,0.002652520,0.002645503,0.002638522,0.002631579,0.002624672,0.002617801,0.002610966,0.002604167,0.002597403,0.002590674,0.002583979,0.002577320,0.002570694,0.002564103,0.002557545,0.002551020,0.002544529,0.002538071,0.002531646,0.002525253,0.002518892,0.002512563,0.002506266,0.002500000,0.002493766,0.002487562,0.002481390,0.002475248,0.002469136,0.002463054,0.002457002,0.002450980,0.002444988,0.002439024,0.002433090,0.002427184,0.002421308,0.002415459,0.002409639,0.002403846,0.002398082,0.002392344,0.002386635,0.002380952,0.002375297,0.002369668,0.002364066,0.002358491,0.002352941,0.002347418,0.002341920,0.002336449,0.002331002,0.002325581,0.002320186,0.002314815,0.002309469,0.002304147,0.002298851,0.002293578,0.002288330,0.002283105,0.002277904,0.002272727,0.002267574,0.002262443,0.002257336,0.002252252,0.002247191,0.002242152,0.002237136,0.002232143,0.002227171,0.002222222,0.002217295,0.002212389,0.002207506,0.002202643,0.002197802,0.002192982,0.002188184,0.002183406,0.002178649,0.002173913,0.002169197,0.002164502,0.002159827,0.002155172,0.002150538,0.002145923,0.002141328,0.002136752,0.002132196,0.002127660,0.002123142,0.002118644,0.002114165,0.002109705,0.002105263,0.002100840,0.002096436,0.002092050,0.002087683,0.002083333,0.002079002,0.002074689,0.002070393,0.002066116,0.002061856,0.002057613,0.002053388,0.002049180,0.002044990,0.002040816,0.002036660,0.002032520,0.002028398,0.002024291,0.002020202,0.002016129,0.002012072,0.002008032,0.002004008])       
        Selin_Prob=np.flip(Selin_Prob)
        
    elif method_prob=="GEV_MCMC":
        Selin_Depth=np.array([0,13.75235,18.85891,20.86780,22.48123,23.87568,25.12421,                26.26608,    27.32542,   28.31834,   29.25630,   30.14775,30.99916,31.81563,32.60126,33.35937,34.09275,34.80374,35.49432,36.16619,36.82085,37.45959,38.08354,38.69372,39.29102,39.87624,40.45012,41.01329,41.56637,42.10987,42.64431,43.17013,43.68774,44.19754,44.69986,45.19504,45.68339,46.16519,46.64070,47.11017,47.57382,48.03188,48.48455,48.93203,49.37448,49.81208,50.24499,50.67337,51.09735,51.51707,51.93266,52.34425,52.75195,53.15588,53.55613,53.95281,54.34602,54.73584,55.12237,55.50569,55.88589,56.26303,56.63720,57.00846,57.37689,57.74254,58.10549,58.46579,58.82350,59.17869,59.53139,59.88167,60.22958,60.57516,60.91847,61.25954,61.59843,61.93517,62.26981,62.60239,62.93294,63.26150,63.58812,63.91281,64.23563,64.55660,64.87575,65.19312,65.50874,65.82263,66.13483,66.44536,66.75425,67.06152,67.36721,67.67133,67.97392,68.27499,68.57457,68.87268,69.16934,69.46458,69.75841,70.05086,70.34194,70.63168,70.92009,71.20720,71.49301,71.77756,72.06085,72.34290,72.62374,72.90336,73.18180,73.45907,73.73518,74.01014,74.28398,74.55670,74.82832,75.09885,75.36831,75.63671,75.90406,76.17037,76.43566,76.69994,76.96322,77.22552,77.48683,77.74718,78.00658,78.26503,78.52255,78.77915,79.03483,79.28961,79.54350,79.79651,80.04864,80.29990,80.55031,80.79988,81.04860,81.29650,81.54357,81.78984,82.03529,82.27996,82.52383,82.76692,83.00924,83.25080,83.49160,83.73164,83.97094,84.20951,84.44735,84.68446,84.92086,85.15655,85.39154,85.62582,85.85942,86.09234,86.32458,86.55615,86.78705,87.01729,87.24688,87.47582,87.70411,87.93177,88.15880,88.38520,88.61098,88.83615,89.06070,89.28465,89.50800,89.73075,89.95291,90.17449,90.39548,90.61590,90.83575,91.05503,91.27375,91.49190,91.70951,91.92656,92.14307,92.35904,92.57447,92.78937,93.00374,93.21758,93.43091,93.64371,93.85601,94.06779,94.27907,94.48984,94.70012,94.90991,95.11920,95.32800,95.53632,95.74416,95.95153,96.15841,96.36483,96.57078,96.77627,96.98130,97.18587,97.38998,97.59364,97.79686,97.99963,98.20196,98.40384,98.60530,98.80631,99.00690,99.20706,99.40680,99.60611,99.80500,100.00348,100.20154,100.39919,100.59643,100.79327,100.98970,101.18573,101.38137,101.57660,101.77145,101.96590,102.15996,102.35364,102.54693,102.73984,102.93237,103.12453,103.31631,103.50772,103.69875,103.88942,104.07973,104.26967,104.45924,104.64846,104.83732,105.02583,105.21398,105.40178,105.58924,105.77634,105.96310,106.14952,106.33559,106.52133,106.70673,106.89179,107.07652,107.26091,107.44498,107.62872,107.81213,107.99522,108.17798,108.36042,108.54255,108.72435,108.90584,109.08702,109.26788,109.44844,109.62868,109.80861,109.98824,110.16757,110.34659,110.52531,110.70373,110.88185,111.05968,111.23721,111.41444,111.59139,111.76804,111.94441,112.12048,112.29627,112.47178,112.64700,112.82194,112.99660,113.17098,113.34509,113.51891,113.69246,113.86574,114.03874,114.21148,114.38394,114.55613,114.72806,114.89972,115.07112,115.24225,115.41312,115.58373,115.75408,115.92417,116.09401,116.26359,116.43291,116.60198,116.77079,116.93936,117.10767,117.27574,117.44356,117.61113,117.77845,117.94553,118.11237,118.27896,118.44531,118.61143,118.77730,118.94293,119.10833,119.27349,119.43842,119.60311,119.76757,119.93180,120.09580,120.25956,120.42310,120.58641,120.74949,120.91235,121.07498,121.23739,121.39957,121.56153,121.72327,121.88479,122.04609,122.20717,122.36804,122.52869,122.68912,122.84933,123.00934,123.16913,123.32870,123.48807,123.64722,123.80617,123.96491,124.12344,124.28176,124.43987,124.59778,124.75549,124.91299,125.07029,125.22738,125.38428,125.54097,125.69746,125.85376,126.00986,126.16575,126.32146,126.47696,126.63227,126.78739,126.94231,127.09704,127.25158,127.40593,127.56008,127.71405,127.86782,128.02141,128.17481,128.32802,128.48105,128.63389,128.78654,128.93901,129.09130,129.24340,129.39532,129.54706,129.69862,129.85000,130.00120,130.15222,130.30306,130.45372,130.60421,130.75452,130.90465,131.05461,131.20439,131.35400,131.50344,131.65270,131.80180,131.95072,132.09947,132.24805,132.39646,132.54470,132.69277,132.84068,132.98841,133.13598,133.28339,133.43063,133.57770,133.72461,133.87136,134.01794,134.16436,134.31062,134.45671,134.60265,134.74842,134.89403,135.03949,135.18479,135.32992,135.47490,135.61973,135.76439,135.90890,136.05325,136.19745,136.34150,136.48539,136.62912,136.77271,136.91614,137.05941,137.20254,137.34552,137.48834,137.63101,137.77354,137.91591,138.05814,138.20022,138.34215,138.48393,138.62557,138.76706,138.90840,139.04960,139.19066,139.33157,139.47233,139.61295,139.75343,139.89377,140.03396,140.17401,140.31392,140.45369,140.59332,140.73281,140.87216,141.01137,141.15044,141.28937,141.42816,141.56682,141.70534,141.84372,141.98197,142.12008,142.25806,142.39590,142.53360,142.67118,142.80861,142.94592,143.08309,143.22013,143.35704,143.4938])
        Selin_Depth.reverse()
        Selin_Prob=np.array([1,0.999999990,0.499999998,0.333333332,0.249999999,0.200000000,0.166666666,0.142857143,0.125000000,0.111111111,0.100000000,0.090909091,0.083333333,0.076923077,0.071428571,0.066666667,0.062500000,0.058823529,0.055555556,0.052631579,0.050000000,0.047619048,0.045454545,0.043478261,0.041666667,0.040000000,0.038461538,0.037037037,0.035714286,0.034482759,0.033333333,0.032258065,0.031250000,0.030303030,0.029411765,0.028571429,0.027777778,0.027027027,0.026315789,0.025641026,0.025000000,0.024390244,0.023809524,0.023255814,0.022727273,0.022222222,0.021739130,0.021276596,0.020833333,0.020408163,0.020000000,0.019607843,0.019230769,0.018867925,0.018518519,0.018181818,0.017857143,0.017543860,0.017241379,0.016949153,0.016666667,0.016393443,0.016129032,0.015873016,0.015625000,0.015384615,0.015151515,0.014925373,0.014705882,0.014492754,0.014285714,0.014084507,0.013888889,0.013698630,0.013513514,0.013333333,0.013157895,0.012987013,0.012820513,0.012658228,0.012500000,0.012345679,0.012195122,0.012048193,0.011904762,0.011764706,0.011627907,0.011494253,0.011363636,0.011235955,0.011111111,0.010989011,0.010869565,0.010752688,0.010638298,0.010526316,0.010416667,0.010309278,0.010204082,0.010101010,0.010000000,0.009900990,0.009803922,0.009708738,0.009615385,0.009523810,0.009433962,0.009345794,0.009259259,0.009174312,0.009090909,0.009009009,0.008928571,0.008849558,0.008771930,0.008695652,0.008620690,0.008547009,0.008474576,0.008403361,0.008333333,0.008264463,0.008196721,0.008130081,0.008064516,0.008000000,0.007936508,0.007874016,0.007812500,0.007751938,0.007692308,0.007633588,0.007575758,0.007518797,0.007462687,0.007407407,0.007352941,0.007299270,0.007246377,0.007194245,0.007142857,0.007092199,0.007042254,0.006993007,0.006944444,0.006896552,0.006849315,0.006802721,0.006756757,0.006711409,0.006666667,0.006622517,0.006578947,0.006535948,0.006493506,0.006451613,0.006410256,0.006369427,0.006329114,0.006289308,0.006250000,0.006211180,0.006172840,0.006134969,0.006097561,0.006060606,0.006024096,0.005988024,0.005952381,0.005917160,0.005882353,0.005847953,0.005813953,0.005780347,0.005747126,0.005714286,0.005681818,0.005649718,0.005617978,0.005586592,0.005555556,0.005524862,0.005494505,0.005464481,0.005434783,0.005405405,0.005376344,0.005347594,0.005319149,0.005291005,0.005263158,0.005235602,0.005208333,0.005181347,0.005154639,0.005128205,0.005102041,0.005076142,0.005050505,0.005025126,0.005000000,0.004975124,0.004950495,0.004926108,0.004901961,0.004878049,0.004854369,0.004830918,0.004807692,0.004784689,0.004761905,0.004739336,0.004716981,0.004694836,0.004672897,0.004651163,0.004629630,0.004608295,0.004587156,0.004566210,0.004545455,0.004524887,0.004504505,0.004484305,0.004464286,0.004444444,0.004424779,0.004405286,0.004385965,0.004366812,0.004347826,0.004329004,0.004310345,0.004291845,0.004273504,0.004255319,0.004237288,0.004219409,0.004201681,0.004184100,0.004166667,0.004149378,0.004132231,0.004115226,0.004098361,0.004081633,0.004065041,0.004048583,0.004032258,0.004016064,0.004000000,0.003984064,0.003968254,0.003952569,0.003937008,0.003921569,0.003906250,0.003891051,0.003875969,0.003861004,0.003846154,0.003831418,0.003816794,0.003802281,0.003787879,0.003773585,0.003759398,0.003745318,0.003731343,0.003717472,0.003703704,0.003690037,0.003676471,0.003663004,0.003649635,0.003636364,0.003623188,0.003610108,0.003597122,0.003584229,0.003571429,0.003558719,0.003546099,0.003533569,0.003521127,0.003508772,0.003496503,0.003484321,0.003472222,0.003460208,0.003448276,0.003436426,0.003424658,0.003412969,0.003401361,0.003389831,0.003378378,0.003367003,0.003355705,0.003344482,0.003333333,0.003322259,0.003311258,0.003300330,0.003289474,0.003278689,0.003267974,0.003257329,0.003246753,0.003236246,0.003225806,0.003215434,0.003205128,0.003194888,0.003184713,0.003174603,0.003164557,0.003154574,0.003144654,0.003134796,0.003125000,0.003115265,0.003105590,0.003095975,0.003086420,0.003076923,0.003067485,0.003058104,0.003048780,0.003039514,0.003030303,0.003021148,0.003012048,0.003003003,0.002994012,0.002985075,0.002976190,0.002967359,0.002958580,0.002949853,0.002941176,0.002932551,0.002923977,0.002915452,0.002906977,0.002898551,0.002890173,0.002881844,0.002873563,0.002865330,0.002857143,0.002849003,0.002840909,0.002832861,0.002824859,0.002816901,0.002808989,0.002801120,0.002793296,0.002785515,0.002777778,0.002770083,0.002762431,0.002754821,0.002747253,0.002739726,0.002732240,0.002724796,0.002717391,0.002710027,0.002702703,0.002695418,0.002688172,0.002680965,0.002673797,0.002666667,0.002659574,0.002652520,0.002645503,0.002638522,0.002631579,0.002624672,0.002617801,0.002610966,0.002604167,0.002597403,0.002590674,0.002583979,0.002577320,0.002570694,0.002564103,0.002557545,0.002551020,0.002544529,0.002538071,0.002531646,0.002525253,0.002518892,0.002512563,0.002506266,0.002500000,0.002493766,0.002487562,0.002481390,0.002475248,0.002469136,0.002463054,0.002457002,0.002450980,0.002444988,0.002439024,0.002433090,0.002427184,0.002421308,0.002415459,0.002409639,0.002403846,0.002398082,0.002392344,0.002386635,0.002380952,0.002375297,0.002369668,0.002364066,0.002358491,0.002352941,0.002347418,0.002341920,0.002336449,0.002331002,0.002325581,0.002320186,0.002314815,0.002309469,0.002304147,0.002298851,0.002293578,0.002288330,0.002283105,0.002277904,0.002272727,0.002267574,0.002262443,0.002257336,0.002252252,0.002247191,0.002242152,0.002237136,0.002232143,0.002227171,0.002222222,0.002217295,0.002212389,0.002207506,0.002202643,0.002197802,0.002192982,0.002188184,0.002183406,0.002178649,0.002173913,0.002169197,0.002164502,0.002159827,0.002155172,0.002150538,0.002145923,0.002141328,0.002136752,0.002132196,0.002127660,0.002123142,0.002118644,0.002114165,0.002109705,0.002105263,0.002100840,0.002096436,0.002092050,0.002087683,0.002083333,0.002079002,0.002074689,0.002070393,0.002066116,0.002061856,0.002057613,0.002053388,0.002049180,0.002044990,0.002040816,0.002036660,0.002032520,0.002028398,0.002024291,0.002020202,0.002016129,0.002012072,0.002008032,0.002004008])
        Selin_Prob.reverse()
    
    # Damages factors accordign to the EU manual for residential buildings in the U.S.
    RES_Damage_Factors=[0.20, 0.44, 0.58, 0.68, 0.78, 0.85, 0.92, 0.96] 
    
    # Depth associated with damage factors mentioned above. 
    # Note that this is the water depth in the house (Compared to the floor)
    EU_Depth=[0, 1.64, 3.28, 4.92, 6.56, 9.84, 13.12, 16.40] 

    for_Expected_Annual_Damages = np.zeros((15,),float)
    for i in range(-4,11):
            for_Expected_Annual_Damages[i+4]=Expected_Annual_Damages(\
                                       Selin_Prob,\
                                       Selin_Depth,\
                                       i,\
                                       350000,\
                                       RES_Damage_Factors,\
                                       EU_Depth)
    
    # Apply discounting over the house lifespan
    Damages30yr = for_Expected_Annual_Damages*ctmp 
    Damages30yr = np.flip(Damages30yr,0)

    # At the end, elevation might not be exactly like the numbers we chose. 
    # Therefore, interpolation is needed
    flood_damage=np.interp(Delta_Elev,elevation_vector,Damages30yr)


    ################################################################################################
    # 4. Calculate reliability: Probability that a certain level is exceeded #######################
    ################################################################################################
    post_elev=24.23-10+Delta_Elev
    
    post_flooding_prob=np.interp(post_elev,np.flip(Selin_Depth),np.flip(Selin_Prob))
    
    flooding_reliability=(1-post_flooding_prob)**n

    ################################################################################################
    # The outputs of this function are cost of elevating the house and flood damages
    ################################################################################################

    return (cost_elevation/1000,flood_damage/1000,flooding_reliability)

####################################################################################################
############### THIS IS THE MAIN HOUSE ELEVATION MODEL AS A FUNCTION ###############################
####################################################################################################

# Uncomment the line below if you would like to test the funcitons above!
# print(house_elevation_problem(0))


